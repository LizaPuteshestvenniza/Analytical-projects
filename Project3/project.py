# # Определяющие успешность игры закономерности
# 
# Интернет-магазин «Стримчик» продаёт по всему миру компьютерные игры. Из открытых источников доступны исторические данные о продажах игр, оценки пользователей и экспертов, жанры и платформы (например, Xbox или PlayStation). Нужно выявить определяющие успешность игры закономерности. Это позволит сделать ставку на потенциально популярный продукт и спланировать рекламные кампании.
# 
# ## Изучение данных из файла

# In[1]:


import pandas as pd 
import matplotlib.pyplot as plt
from IPython.display import display
import numpy as np
import warnings 
from scipy import stats as st
warnings.filterwarnings('ignore')

df = pd.read_csv('/games.csv')
display(df.head(10))
df.info()

# Рассмотрим полученную информацию более подробно:
# 
# Таблица содержит 11 столбцов, в которых встречаются данные типа float64 и object:
# 
# * Name — название игры
# * Platform — платформа
# * Year_of_Release — год выпуска
# * Genre — жанр игры
# * NA_sales — продажи в Северной Америке (миллионы проданных копий)
# * EU_sales — продажи в Европе (миллионы проданных копий)
# * JP_sales — продажи в Японии (миллионы проданных копий)
# * Other_sales — продажи в других странах (миллионы проданных копий)
# * Critic_Score — оценка критиков (максимум 100)
# * User_Score — оценка пользователей (максимум 10)
# * Rating — рейтинг от организации ESRB (англ. Entertainment Software Rating Board). Эта ассоциация определяет рейтинг компьютерных игр и присваивает им подходящую возрастную категорию.
# 
# Количество значений в столбцах различается. Это говорит о том, что в данных есть пропущенные значения.
# 
# **Вывод:**
# 
# В таблице много пропусков, природа которых пока не совсем ясна: пропуск может означать, что информация отсутствует, или что просто, допустим, то же возрастное ограничение отсутствует, поэтому и обозначается NaNом. Для установления закономерности наибоьшее внимание обратим на стобцы *genre* и на оценки от критиков и пользователей. 
# 
# ## Предобработка данных
# 
# Сперва изменим регистр в названии столбцов:

# In[2]:


df.columns = map(str.lower, df.columns)

# Проверим наличие пропусков:

# In[3]:


df.isnull().sum()

# Таблица содержит давольно много пропусков, которые стоит обработать:
# 
# * name - так как всего две игры не имеют названия, избавимся от этих строк, их вклад в ощий анализ незначителен
# * year_of_release - избавимся от пропусков, потому что в дальнейшем надо будет изменить тип этого столбца, а пропуски не позволят это сделать, более того доля пропусков незначительна. 
# * genre - опять две игры, может это даже те же, что и без названия, избавляемся от них
# * user_score и critic_score - столбцы очень значимы, их нельзя просто заменить среднем или медианой, потому что пропусков очень много, да и оценки все субъективны, однако их тип потом надо будет менять, а с NaN это не получится, поэтому заполним пропуски -1, а при анализе будем прописывать условие, игнорирующие -1. Также есть аббревиатура tbd - от английского To Be Determined (будет определено) используется, если какая-то информация еще не определена, по сути тотже NaN, поэтому заменим его на -1. Такая замена выбрана, чтоб не упустить реальные нулевые оценки. 
# * rating - заполним значением "Unknown", потому что природа пропусков не известна

# In[4]:


drop_columns = ['name', 
                'year_of_release', 
                'genre']

for i in drop_columns:
    df = df.dropna(subset = [i])

minus_one_columns = ['user_score', 
                     'critic_score']

for i in minus_one_columns:
    df[i] = df[i].fillna(-1)
    
df['user_score'] = df['user_score'].replace('tbd', -1)
    
df['rating'] = df['rating'].fillna('Unknown')


# Теперь обратим внимание на тип данных в столбцах: 
# 
# * year_of_release - представлен в типе float64, хотя год всегда представляется в целочисленным типом
# * critic_score - не содержит в себе ни одной дробной оценки (проверенно методом *unique*), значит следует перевести в int
# * user_score - представляет собой дробную оценку (проверенно методом *unique*), однако она передана строчным типом, следовательно необходимо изменить тип на float64

# In[5]:


df = df.astype({"year_of_release": "int64",
                "critic_score": "int64", 
                "user_score": "float64"})

# Посчитаем суммарные продажи во всех регионах и запишим их в отдельный столбец *total_sale*, но перед этим округлим продажи до двух знаков после запятой, потому что остальные значения уже не несут особой смысловой нагрузки

# In[6]:


df['total_sale'] = 0
rounded_columns = ['na_sales', 
                   'eu_sales', 
                   'jp_sales', 
                   'other_sales']

for i in rounded_columns:
    df[i] = np.round(df[i], 2)
    df['total_sale'] += df[i]

# Проверим таблицу на наличие дубликатов:

# In[7]:


df.duplicated().sum()


# Дубликаты отсутствуют.
# 
# Еще раз выведем информацию о таблице, чтоб удостовериться в правильности проведенной предобработки. 

# In[8]:


df.info()


# **Вывод:**
# 
# Таблица содержала большое количество пропусков: какие то из них были критичны, какие то нет, в любом случае по итогу предобработки данные готовы к анализу.

# ## Исследовательский анализ данных
# 
# ### Вычисление количества игр в год

# Посмотрим, сколько игр выпускалось в разные годы. 
# 
# Для этого достаточно применить метод *value_counts()*, который выдаст количество встречаний уникальных элементов, что и будет эквивалентно количеству игр в разные года.  

# In[9]:


years_values = df['year_of_release'].value_counts().sort_values()
years_values


# Визуализируем данные. 

# In[10]:


df_years_values = pd.DataFrame(years_values)
df_years_values.columns = ['counts']
df_years_values.plot(y='counts', kind='bar', figsize=(10,7))
plt.title('amout per year')

# Очевидно, что количество игр, выпускаемых в год неумолимо растет, начиная с 1980 года. Данные о играх до 2001 года не представляют особого интереса, потому что, во-первых, их довольно мало, а, во-вторых, качество, графика, сюжеты сильно уступают более современным аналогам. Более того именно после 2001 года виден сильный скачок количества игр исходя из данных на графике. 
# 
# ### Распределение по платформам
# 
# Сделаем срез по каждой платформе и построим графики распределений продаж по годам относительно платформ с наибольшими суммарными продажами. 

# In[11]:


df_more2001 = df[df['year_of_release'] >= 2001]
sum_for_sales = df_more2001.pivot_table(index='platform', 
                                        values = 'total_sale', 
                                        aggfunc='sum')
sum_for_sales.sort_values(by='total_sale', ascending = False)

# Наибольшим количеством продаж отличаются первые пять платформ в полученной таблице *sum_for_sales*: *PS2*, *X360*, *PS3*, *Wii* и *DS*. Построим для них графики распределений по годам. 

# In[12]:


most_popular_platforms = ['PS2', 
                          'X360', 
                          'PS3', 
                          'Wii', 
                          'DS']

for i in most_popular_platforms:
    df_tmp = df_more2001[df_more2001['platform'] == i]
    seles_for_year = df_tmp.pivot_table(index='year_of_release', 
                                        values = 'total_sale', 
                                        aggfunc='sum')
    seles_for_year.plot(y='total_sale', kind='bar', figsize=(10,7))
    plt.title(i)
    plt.show()


# Для каждой платформы характерен свой год пика продаж. Например для *PS2* - 2004, а *PS3* - 2011. Однако особенностью этих платформ является то, что для каждой из них наблюдается стремительний упадок продаж к настоящему времени, а значит основывать анализ на этих платформах нерационально. 
# 
# ### Определение актуального периода
# 
# Так как технологии сильно меняются из года в год, рассматривать период с 2001 года не совсем корректно. Будем основываться на данных за последние 2 года - c 2015 до 2016 года включительно. Такие временные рамки позволят не отставать от современных тенденций и сделать анализ и прогноз более достоверным. Прошлые года соответственно учитываться не будут.

# In[13]:


working_df = df[df['year_of_release'] >= 2015]


# ### Выбор потенциально прибыльных платформ
# 
# На выбранном диапозоне проведем повторные действия для определения растущих и падающих по продажам платформ.
# 
# Для начала определим лидеров продаж за этот период. 

# In[14]:


find_leaders = working_df.pivot_table(index='platform', 
                                      values = 'total_sale', 
                                      aggfunc='sum')
find_leaders.sort_values(by='total_sale', ascending = False)


# Теперь попробуем определить растущие и падающие платформы из этого списка. Для этого создадим функцию, которая будет определять растет или снижается уровень продаж за последние время. 

# In[15]:


def inc_or_dec(str):
    df_tmp_5 = working_df[working_df['platform'] == str]
    seles_for_year_12_16 = df_tmp_5.pivot_table(index='year_of_release', 
                                                values = 'total_sale', 
                                                aggfunc='sum')
    seles_for_year_12_16.plot(y='total_sale', kind='bar', figsize=(10,7))
    plt.title(i)
    plt.show()
        
for i in working_df['platform'].unique():
    inc_or_dec(i)


# На полученых графиках спад наблюдется абсолютно у каждой платформы, однако у 4 платформ он менее критичен: *PS4*, *3DS*, *XOne* и *PC*. Это в какой то степени не особо сочетается со списком лидеров, однако *PS4*, *XOne* и *3DS* оказались в нем и темпы упадка у них не такие быстрые, как у остальных. А значит именно *PS4*, *XOne* и *3DS* можно определить, как потенциально прибыльные платформы. 
# 
# 

# <div class="alert alert-success">
# <b>Комментарии ревьюера:</b> Молодец, что обосновала свой выбор. </div>

# ### Глобальные продажи игр в разбивке по платформам
# 
# Посмотрим, как распростронены игры внутри потенциально прибыльных поплатформ. 

# In[16]:


def games(str):
    df_tmp_5 = working_df[working_df['platform'] == str]
    df_tmp_5.boxplot(column='total_sale', figsize=(10,7))
    plt.ylim([0,1.5])
    plt.show()

leaders =['PS4', 
          'XOne',
          '3DS']
for i in leaders:
    print('platform', i)
    games(i)


# Полученные данные свидетельствуют о том, что в основном продажи игр по платформам лежат в диапозоне не превышающем один миллион, однако есть и игры, которые приносят колосальный доход, это характерно для каждой платформы. 
# In[17]:


def find_influence(str):
    df_str = working_df[working_df['platform'] == str]
    df_str = df_str.query('critic_score != -1 and user_score != -1')
    drop_columns = ['name', 'year_of_release',
                    'genre', 'na_sales', 
                    'eu_sales', 'jp_sales', 
                    'other_sales', 'rating']
    for i in drop_columns:
        df_str = df_str.drop(i, 1)
    print(df_str.corr())
    pd.plotting.scatter_matrix(df_str, figsize=(9, 9))

find_influence("PS4")


# Очень сильно коррелируют столбцы *user_score* и *critic_score*, и действительно, если игра хорошая и интересная, то она нравится как критикам, так и обычным пользователям, а вот на продажи особого влияния они не имеют, хотя определенно связь между ними прямая: с увеличением одного параметра, растет и второй, но незначительно, посмотрим насколько это соответствует платформам *XOne* и *3DS*, чтоб судить о том, насколько это соответствует остальным платформам.

# In[18]:


platforms = ['XOne', '3DS']

for i in platforms:
    print('platform', i)
    find_influence(i)
    print('')


# Получается, что оценки, действительно не оказывают особого влияния на степень продаж. 
# 
# Изучив этот вопрос более детально, было обнаружено, что на самом деле оценка означает не то, насколько игра хороша или плоха, а степень ожидания игроков, например: 10 - большой ажиотаж, 6.5 - мало кому интересна и тд.
# 
# ### Расперделение жанров 
# 
# Посмотрим, как распределяются жанры и выделим среди них наиболее и наименее продаваемые. 

# In[19]:


genre_df = working_df.pivot_table(index='genre', 
                                  values='total_sale',
                                  aggfunc='sum')
genre_df = genre_df.sort_values(by ='total_sale')
genre_df.plot(y='total_sale', kind='bar', figsize=(10,7))


# Самыми продаваемыми жанрами оказались: *Action*, *Shooter*, *Role-Playing* и *Sports*, наименее продаваемые: *Puzzle* и *Strategy*, однако стоит соотнести такое распределение с количеством игр соответствующего жанра, может их просто сильно больше, от чего и получается такое распределение. 

# In[20]:


genre_count_df = working_df.groupby('genre')['name'].count()
genre_count_df = genre_count_df.sort_values(ascending=False)
genre_count_df


# Действительно, игр жанра action больше почти в три раза по сравнению со следующим идущем жанром, поэтому и продажи наибольшие, жанр puzzle имеет наименьшее число продаж, но и игр меньше всего, что очень логично, однако игр жанра shooter не так уж и много, а по продажам они занимают второе место.
# 
# Для более точной оценки посмотрим еще на медианные продажи по каждому жанру

# In[21]:


for i in working_df['genre'].unique():
    genre_query =  working_df[working_df['genre'] == i]
    genre_median = genre_query['total_sale'].median()
    print(i, genre_median)


# В целом медианные продажи не опровергли полученных ранее результатов. 
# 
# **Вывод:**
# 
# По итогу проведения исследовательского анализа были выявлены лидеры продаж среди платформ и жанров игр, определены временные рамки наиболее интересного периода для проведения анализа, но что самое главное - выделены потенциально прибыльные платформы. 

# ## Составление портрета пользователя отдельно каждого региона
# 
# Рассмотрим теперь отдельно каждый регион и выделим топ5 лидирующих позиций по каждому параметру: платформа, жанр и возрастной рейтинг. 

# In[22]:


regions = ['na_sales', 'eu_sales', 'jp_sales']
criterion = ['platform', 'genre', 'rating']

def top5_platforms(str):
    for i in criterion:
        region_df = working_df.pivot_table(index=i, 
                                           values=str,
                                           aggfunc='sum')
        region_df = region_df.sort_values(by=str, ascending=False)
        print(region_df)

for i in regions:
    top5_platforms(i)


# Именно столько было совершено продаж по каждому из критериев, исходя из чего можно выделить топ5 лидеров для каждого региона по разным критериям. 
# 
# *Америка:*
# 
# Топ5 по платформам:
# 
# * PS4
# * XOne
# * 3DS
# * WiiU
# * X360  
# 
# В общей сложности именно эти платформы и составляют определяющее большинтво продаж, занимая колоссальную долю среди всех имеющихся. 
# 
# Топ5 по жанрам:
# 
# * Shooter
# * Action
# * Sports
# * Role-Playing 
# * Misc
# 
# Action и Shooter имеют тут наибольшую долю продаж, что говорит о грандизной популярности этих жанров в Америке. 
# 
# Что касается возрастных ограничений, то лидером здесь являются игры для детей старше 17 лет. 
# 
# 
# *Европа:*
# 
# Топ5 по платформам:
# 
# * PS4
# * XOne
# * PC
# * 3DS
# * PS3  
# 
# Наибольшее предпочтение люди в этом регионе отдают PS4 и XOne. 
# 
# Топ5 по жанрам:
# 
# * Shooter
# * Action
# * Sports
# * Role-Playing
# * Racing 
# 
# Рейтинг идентичен американскому, однако пятую позицию занимает жанр *racing*, наверное, это связано с тем, что именно в этом регионе гонки занимают не последнее место среди интересов населения, как минимум именно в Европе проводится Формула 1 (в Монако), и именно Европа является главным производителем и создателем гоночных автомобилей. 
# 
# В Европе также как и в Америке отдают предпочтение играм с возратсным рейтингом либо для всех, либо 17+
# 
# *Япония:*
# 
# Топ5 по платформам:
# 
# * 3DS
# * PS4
# * PSV
# * PS3
# * WiiU 
# 
# В целом картина не сильно отличается от Европы и Америки, но есть и что то новое в этом топе. 
# 
# Топ5 по жанрам:
# 
# * Action
# * Role-Playing
# * Shooter
# * Misc
# * Adventure
# 
# Как и в случае с платформами, конечно, есть схожие направления с Европой и Америкой, однако встречаются и новые, например, Adventure
# 
# Что касается возрастных ограниченй:  наибольшое количество из них неизвестно, однако следующим типом идет маркировка для тинейджеров. 
# 
# **Вывод:**
# 
# Портреты Америки и Европы очень похожи, а вот Япония от них отличается, но не сильно. 

# ## Проверка гипотез
# 
# ### Гипотеза о равенстве средних пользовательских оценках
# 
# Проверим на сколько верно предположение, что средние пользовательские рейтинги платформ *Xbox One* и *PC* одинаковые.
# 
# Нулевая гипотеза: средние пользовательские рейтинги платформ *Xbox One* и *PC* одинаковые
# 
# Альтернативная гипотеза: средние пользовательские рейтинги платформ *Xbox One* и *PC* разные
# 
# Значение *alpha* возьмем равным 0.05
# 
# А также посмотрим на распределение значений на графике. 

# In[23]:


XOne_df = working_df.query('platform == "XOne" and user_score != -1')
PC_df = working_df.query('platform == "PC" and user_score != -1')

def find_var(samp1, samp2):
    var_1 = np.var(samp1)
    var_2 = np.var(samp2)
    if (var_1 == var_2) :
        print('использовать equal_val = True')
    else:
        print('использовать equal_val = False')
    samp1.hist(bins=35, alpha = 0.7)
    samp2.hist(bins=35, alpha = 0.6)
       
find_var(XOne_df['user_score'], PC_df['user_score'])


# Распределение стремится к нормальному, однако все же для проверки гипотез будем использовать t-распределение Стъюдента.

# In[24]:


results = st.ttest_ind(XOne_df['user_score'], PC_df['user_score'], equal_var = False)
print('p-значение: ', results.pvalue)


# Полученное значение не дает оснований отвергнуть нулевую гипотезу о том, что средние пользовательские рейтинги платформ Xbox One и PC одинаковые
# 
# ###  Проверка гипотезы об отличии пользовательских рейтингов жанров Action и Sports
# 
# Нулевая гипотеза: пользовательские рейтинги жанров Action и Sports равны
# 
# Альтернативная гипотеза: пользовательские рейтинги жанров Action и Sports разные
# 
# Значение *alpha* возьмем равным 0.05

# In[25]:


action_df = working_df.query('genre == "Action" and user_score != -1')
sports_df = working_df.query('genre == "Sports" and user_score != -1')

find_var(action_df['user_score'], sports_df['user_score'])


# Распределение стремится к нормальному, однако все же для проверки гипотез будем использовать t-распределение Стъюдента.

# In[26]:


results = st.ttest_ind(action_df['user_score'], sports_df['user_score'], equal_var = False)
print('p-значение: ', results.pvalue)

# Полученное значение дает достаточные основания отвернуть нулевую гипотезу, приняв то, что пользовательские рейтинги жанров Action и Sports разные  
# 
# ## Общий вывод
# 
# Проведенный анализ показал, что для того, чтоб выбрать перспективный продукт, надо в первую очередь основываться на том, в каком регионе будут проводиться продажи, ведь, исходя из полученных результатов, рынок Японии сильно отличается от Американского и Европейского рынков, которые сами по себе сильно похожи друг на друга. 
# 
# Однако лидером в установленный актуальный период (2012-2016) является PlayStation абсолютно в каждом регионе, вместе с которым лидирующие позиции занимает жанр Action - вместе они и представляют собой наиболее перспективные и потенциально популярные продукты. 

# ## Чек-лист
# 
# - [x] описаны выявленные в данных проблемы
# - [x] подготовлен датасет к анализу
# - [x] графики для распределений построены и объяснены
# - [x] рассчитана дисперсия
# - [x] сформулированна альтернативная и нулевая гипотезы
# - [x] применены методы для их проверки
# - [x] объяснены результат проверки гипотез
# - [x] соблюдена структура проекта и поддерживается аккуратность кода
# - [x] делаются выводы 
# - [x] оставляются комментарии к шагам
